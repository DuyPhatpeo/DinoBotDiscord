module.exports = {
  name: "interactionCreate",
  async execute(interaction) {
    // Slash Command
    if (interaction.isChatInputCommand()) {
      const command = interaction.client.commands.get(interaction.commandName);
      if (!command) {
        console.error(`No command matching ${interaction.commandName}`);
        return;
      }
      try {
        await command.execute(interaction);
      } catch (err) {
        console.error(err);
        if (interaction.replied || interaction.deferred) {
          await interaction.followUp({
            content: "C√≥ l·ªói x·∫£y ra khi ch·∫°y l·ªánh.",
            ephemeral: true,
          });
        } else {
          await interaction.reply({
            content: "C√≥ l·ªói x·∫£y ra khi ch·∫°y l·ªánh.",
            ephemeral: true,
          });
        }
      }
    }

    // Button Interaction (d√πng cho poll, confirm, vv)
    if (interaction.isButton()) {
      // Poll
      if (interaction.customId.startsWith("poll_")) {
        const choice = interaction.customId.split("_")[1];
        return interaction.reply({
          content: `üó≥Ô∏è ${interaction.user} ƒë√£ ch·ªçn **L·ª±a ch·ªçn ${choice}**`,
          ephemeral: true,
        });
      }

      // C√°c button kh√°c b·∫°n th√™m x·ª≠ l√Ω ·ªü ƒë√¢y
    }

    // Select Menu Interaction (n·∫øu b·∫°n mu·ªën sau n√†y d√πng dropdown)
    if (interaction.isStringSelectMenu()) {
      // V√≠ d·ª• x·ª≠ l√Ω select menu
      console.log(`${interaction.user.tag} ch·ªçn: ${interaction.values}`);
      await interaction.reply({
        content: `B·∫°n ƒë√£ ch·ªçn: ${interaction.values.join(", ")}`,
        ephemeral: true,
      });
    }
  },
};
